// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc250.Stronghold2016.subsystems;

import org.usfirst.frc250.Stronghold2016.RobotMap;
import org.usfirst.frc250.Stronghold2016.commands.intakeArm.MoveIntakeArm;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class IntakeArm extends Subsystem {

	private final CANTalon armMotor = RobotMap.intakeArmarmMotor;

	private boolean isHittingSomething = false;

	public IntakeArm() {
		armMotor.ConfigFwdLimitSwitchNormallyOpen(true);
		armMotor.ConfigRevLimitSwitchNormallyOpen(true);
		armMotor.setInverted(true);
		armMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		armMotor.configEncoderCodesPerRev(2048);
		armMotor.setProfile(0);
		armMotor.setP(4);
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		setDefaultCommand(new MoveIntakeArm());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	

	/**
	 * Moves the intake arm at the given speed.
	 * 
	 * @param speed
	 *            A value from -1 to 1.
	 */
	public void moveArm(double speed) {
		if (armMotor.isRevLimitSwitchClosed()) armMotor.setPosition(0);
		if (armMotor.isFwdLimitSwitchClosed()) armMotor.set(0.54);
		if (isArmCurrentHigh() && speed >= 0) {
			isHittingSomething = true;
			armMotor.set(0);
		} else if (isHittingSomething && speed >= 0) {
			armMotor.set(0);
		} else {
			isHittingSomething = false;
			armMotor.set(speed);
		}
	}
	
	public void enableClosedLoop (boolean isClosedLoop) {
		if (isClosedLoop) {
			armMotor.changeControlMode(TalonControlMode.Position);
		} else {
			armMotor.changeControlMode(TalonControlMode.PercentVbus);
		}
	}
	
	public void setArmPosition (double position) {
		armMotor.set(position);
	}
	public boolean isArmOnTarget () {
		return Math.abs(getArmPosition() - armMotor.getSetpoint()) < 0.01;
	}

	public double getArmCurrent() {
		return armMotor.getOutputCurrent();
	}

	public boolean isArmCurrentHigh() {
		return getArmCurrent() > 1;
	}

	/**
	 * Stops the intake arm.
	 */
	public void stopArm() {
		armMotor.set(0);
	}

	public double getArmSpeed() {
		return armMotor.getOutputVoltage();
	}

	public double getArmPosition() {
		return armMotor.getPosition();
	}

	public boolean isAtTopLimit() {
		return armMotor.isFwdLimitSwitchClosed();
	}

	public boolean isAtBottomLimit() {
		return armMotor.isRevLimitSwitchClosed() || isHittingSomething;
	}
}
