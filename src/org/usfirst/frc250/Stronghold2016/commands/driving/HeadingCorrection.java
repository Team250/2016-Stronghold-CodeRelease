// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.Stronghold2016.commands.driving;

import org.usfirst.frc250.Stronghold2016.Constant;
import org.usfirst.frc250.Stronghold2016.Robot;
import org.usfirst.frc250.Stronghold2016.Utilities;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class HeadingCorrection extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HeadingCorrection() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    double targetAngle;

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    	if (Math.abs(Utilities.angleDifference(Robot.miscellany.getHeading(), 0)) < Constant.kHEADING_CORRECTION_THRESHOLD.get()) {
    		targetAngle = 0;
    	} else if (Math.abs(Utilities.angleDifference(Robot.miscellany.getHeading(), 180)) < Constant.kHEADING_CORRECTION_THRESHOLD.get()) {
    		targetAngle = 180;
    	} else {
    		end();
    	}
     }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (Utilities.angleDifference(Robot.miscellany.getHeading(), targetAngle) > Constant.kHEADING_CORRECTION_TOLERANCE.get()) {
    		Robot.drivetrain.drive(-Constant.kHEADING_CORRECTION_SPEED.get(), Constant.kHEADING_CORRECTION_SPEED.get());
    	} else if (Utilities.angleDifference(Robot.miscellany.getHeading(), targetAngle) < -Constant.kHEADING_CORRECTION_TOLERANCE.get()) {
    		Robot.drivetrain.drive(Constant.kHEADING_CORRECTION_SPEED.get(), -Constant.kHEADING_CORRECTION_SPEED.get());
    	} else {
    		Robot.drivetrain.drive(0, 0);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return Math.abs(Utilities.angleDifference(Robot.miscellany.getHeading(), targetAngle)) <= Constant.kHEADING_CORRECTION_TOLERANCE.get();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
